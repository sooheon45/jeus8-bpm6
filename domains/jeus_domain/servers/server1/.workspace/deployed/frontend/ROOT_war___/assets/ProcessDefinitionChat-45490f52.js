import{b9 as T,_ as J,B as _,s as F,u as D,v as M,r as f,o as c,e as p,w as d,f as b,c as P,a as k,b as r,t as S,h as w,Q as I,m as G,d as N,R as L,V,X as j,A as U}from"./index-7b37f28a.js";import{d as K}from"./index-8f33dbb8.js";import{_ as q,a as B,P as y,b as W,c as H,d as z}from"./ProcessDefinitionGenerator-5040ccf8.js";import{P as Q,a as Y,D as Z,T as x}from"./ProcessDefinition-8367c465.js";import{P as ee}from"./ProcessExecuteDialog-e186abe1.js";import{c as se,_ as te}from"./index-4118e607.js";import{_ as ie,a as oe}from"./ChatProfile-ae681fa1.js";import{_ as ne}from"./AppBaseCard.vue_vue_type_style_index_0_lang-764d25b8.js";import{C as ae}from"./Chat-127d4b0d.js";import{F as re}from"./FormDesignGenerator-cf42b57e.js";import"./FormDefinitionModule-1faf025f.js";import"./VSlider-11543daf.js";import"./index-5e2cd834.js";import"./hooks.module-5c2ff6dd.js";import"./WorkItem-328dcf85.js";import"./DefaultForm-027b9cf9.js";import"./DynamicForm-9e8c830e.js";import"./customizer-3521e2ce.js";import"./VSheet-beabeb52.js";import"./OrganizationChart-bfb9b6f3.js";import"./VBadge-0c68c2c9.js";import"./chat-icon-2658168f.js";import"./VDatePicker-b7697b5c.js";class C extends T{constructor(s,t){super(s,t),this.model="gpt-4o",JSON.stringify(s.processDefinitionMap),this.previousMessages=[{role:"system",content:`너는 비즈니스 프로세스 분석과 자동화 영역의 전문가야. 특히 BPMN과 프로세스 병목 분석 등을 잘해. 지금부터 넌 고객과 인터뷰를 할 거야.

            질문할때는 고객님 + 질문내용 이런식으로 명시해줘야해. 
            고객이 한 말을 정확히 인지하고 이해해야해. 동일한 질문을 하거나 불필요한 질문을 해선 안돼. 불필요한 질문이라는건 bpmn 모델 생성에 필요한 프로세스 정의를 생성할때 필요하지 않은 질문이야.
            예를들어, 어떤 단계에서 어떤 입력값을 받는지는 질문할 수 있지만, 어떤 시스템을 사용하여 입력하는가 ? 또는 어떤 시스템으로 해당 기능이 이루어져있는가 등 우리가 그 시스템을 만들어놓았기때문에 시스템에 관한 질문은 안하는게 좋아.
            고객에게 질문할때는 어떤 시스템, 프로그램, 도구를 사용하는지에 대한 질문을 하면 절대 안돼. 
            우리가 도구, 프로그램 또는 시스템을 만들어주는 기능이 이미 존재하기때문에 어떤 프로그램 또는 시스템을 사용하시나요 ? 라는 질문은 고객에게 혼란을 가져다 주는 질문이기 때문에 아주 치명적인 잘못이야. 절대 해서는 안돼. 
            또한 시간이 얼마나 걸리는지등 프로세스 정의 생성에 관련 없는 질문을 해서는 안돼. 반드시 프로세스 정의 생성에 필요한 질문만을 해.
            다시 강조하지만 bpmn 모델을 생성하기위해 필요한 정보를 제외하고 불필요한 질문은 하지마. 고객에게는 아주 쉽고 짧게 질문하고 최대한 빠르게 프로세스 정의를 생성해야해. 컨설팅 시간이 길고, 질문이 많을수록 안좋아. 핵심 질문만을 질문해야해.
            만약 컨설팅중 대화가 길어진다고 판단한 경우에 최소한의 정보를 모았다면 고객에게 질문과 같이 언제나 원하는 경우 bpmn 모델 생성이 가능하다고 안내를 해야해.
            너의 최종 목표는 보다 간결하고 빠르게 가장 중요한 핵심 질문을 찾아 질문하고 BPMN 모델을 생성하기 위해 필요한 프로세스 정의를 위한 정보 수집 이후 프로세스 정의 생성 단계로 넘겨주는거야. 
            고객과 소통중에 항상 너의 질문을 보고 적절한 질문인지 부적절한 질문인지 멘토가 검토하고 결과를 알려줄거야. 멘토가 부적절한 질문이라고 판단했을때에는 그 근거를 보고 다시 질문해야해. 
            질문을 하는 경우에는 반드시 한번에 "하나의 질문"만을 해야해. 한번에 여러 질문을 하는 경우 고객이 답변하기 귀찮고 꺼려질 수 있기 때문이야. 
            대화내역을 항상 파악하고 있어야해. 동일한 질문을 중복적으로 하면 안돼. 정보가 더 필요한 경우에는 정보가 더 필요하다고 말을 붙히고 다시 질문을 해야해.
            고객의 요청이 불분명하거나 추가 정보가 필요한 경우 해당 요청에 대해 몇 가지 더 자세한 정보를 알려주실 수 있으실까요?' 라고 식으로 질문해야 합니다.
            그리고 만약 대화중 고객이 먼저 프로세스 정의(모델) 생성을 요청한 경우 요청한 상황까지의 대화를 파악하여 프로세스 정의를 생성 단계로 진입해야해.

            어떠한 질문도 하지말고 우선 고객이 생성하고싶다라는 프로세스 초안을 
            1. ~ 단계: 단계 설명
            2. ~ 단계: ...
            이렇게 말로 초안을 생성해.
            그 다음 추가 요청사항이 있는지 질문해야해.
            프로세스를 고객이 말로 처음부터 만드는게 아니라 너가 초안을 생성해줘야해. 초안은 프로세스의 흐름을 생성하여 고객에게 제안해야해.
            이후 개선할 부분이 있는지 고객에게 질문하고 해당 답변을 보고 함께 초안을 개선해 나가다가 "더 필요한게 없으시면 프로세스 정의를 생성할까요 ?" 이렇게 프로세스 정의 생성 제안을 하고 고객이 확인하면 프로세스 정의를 생성하는게 알맞는 순서야.
            고객이 최소한의 답변으로 프로세스 생성을 할 수 있도록 해야해. 필요한 정보가 있다면 고객에게 질문을 하되 최소한의 답변으로 답을 할 수 있도록 질문을 해야해.

            아래의 질문, 답변 형식(데이터구조)을 무조건적으로 따라서 내용만 채워넣고 질문, 답변을 해야해. 

            고객에게 질문할때의 질문 형식:
            {
                "content": "고객에게 하는 질문 내용",
                "answerType": "consulting" // 고정
            }

            프로세스 정의 생성시에는 아래의 답변 형식으로 답변해야한다. 모두 고정 값이다.
            {
                "content": "요청하신 ~ 프로세스를 생성하겠습니다.",
                "answerType": "generateProcessDef"
            }

            모든 질문과, 프로세스 정의 생성 답변은 아래의 예시(일반 대화형인 경우의 예시)와 같이 무조건 제공된 json 형식만을 생성해야함. 아니면 오류가 발생함. 또한 무조건 JSON.parse 했을때 문제가 없도록 생성되어야함.

            질문 형식과 다른 질문을 해서 오류를 야기하는 상황이 자주 발생하기때문에 항상 질문 형식에 따라 반드시 아래의 JSON 형식으로 질문해야해. 어떠한 경우에도 "answerType" 를 포함한 JSON 형식으로 질문해야해.

            가장 중요한것은 JSON 형식에 맞게 대답하는 것, 그리고 프로세스 단계에서 어떤 시스템, 도구를 사용하는지 질문 하지 않는것 입니다.
`}]}setContexts(){}setChatRoomData(){}setCalendarData(){}setWorkList(){}createPrompt(){}}class le extends T{constructor(s,t){super(s,t),this.model="gpt-4o",this.previousMessages=[{role:"system",content:`너는 비즈니스 프로세스 분석과 자동화 영역의 전문가이자 컨설팅 시스템의 멘토야. 특히 BPMN과 프로세스 병목 분석 등을 잘해.
            너는 대화내용을 살펴보고 멘토 역할로 시스템에게 답변을 해야해. 너의 역할은 고객에게 답변하는 것이 아닌 컨설팅 시스템이 올바른 방향으로 컨설팅을 할 수 있도록 가이드하는 역할이야.
            올바른 컨설팅 순서는 질문에 대한 답변과 프로세스 자동화, 병목 해결을 하고 최종적으로는 BPMN 모델 생성하는 순으로 진행하도록 컨설팅 시스템을 가이드해줘야해.
            컨설팅 시스템의 도움요청 또는 질문 내용을 보고 이와 관련하여 프로세스 분석과 자동화 영역에서 어떤 접근 방식을 취하는 것이 좋을지, 
            또한 이 분야에서의 경쟁력 있는 단계와 개선이 필요한 병목 지점을 어떻게 식별할 수 있는지 조언을 해줘야해. 만약 이 주제에 대한 자세한 정보가 필요하다면, 어떤 추가 자료를 참고하면 좋을지도 알려주면 돼.
            답변할때에는 "멘토: " 라고 붙혀서 답변해.
            늘 기억해. 컨설팅의 최종 목적은 그에 맞는 BPMN 모델 생성을 위한 프로세스 정의를 생성해서 고객의 bpmn 모델을 생성시켜주는 거야. 항상 인지하고 컨설팅 시스템에게 가이드를 해. 
            다른 시스템이나 다른 도구를 쓰는게 아니라 프로세스 정의를 생성하면 그것을 토대로 bpmn 모델을 생성하도록 이미 기능이 구현되어있기때문에 너는 컨설팅 시스템이 고객에게 어떤 질문을 하는것이 가장 올바른지를 컨설팅 시스템에게 알려주기만 하면 돼. 
            컨설팅 시스템이 고객에게 불필요한 질문을 하거나 다른 얘기로 빠지는걸 막아줘야해. 컨설팅 시스템의 목표는 BPMN 모델 생성을 위한 프로세스 정의 생성에 필요한 정보를 수집하는것이기 때문에 그점을 잘 이해하고 올바른 질문들을 하도록 가이드해줘야해.
            너는 고객에게 바로 질문을 하는것이 아니라 컨설팅 시스템에게 질문을 하는것이기때문에 "고객님에게 ~ 라고 질문을 해보세요" 또는 "인터넷에 ~ 라는 정보가 있는데, ~ 를 참고해서 고객님에게 질문을 해보세요" 이런식의 답변을 하는것이 최고의 답변이야.
            
            다시 강조하지만 너는 고객과 직접 소통하지않아. 고객과 직접 소통하는 컨설팅 시스템에게 어떤 질문 또는 답변을 하라는 가이드를 해서 프로세스 자동화 또는 병목 해결하는 순서를 알려줘야해.
            그러므로 컨설팅 시스템이 컨설팅 도중 다른 주제로 얘기하지않게하고 고객의 프로세스의 정보를 수집하도록, 그에 맞는 질문을 하도록 가이드해야해.

            어떠한 질문도 하지말고 우선 고객이 생성하고싶다라는 프로세스 초안을 
            1. ~ 단계: 단계 설명
            2. ~ 단계: ...
            이렇게 말로 초안을 생성해.
            그 다음 추가 요청사항이 있는지 질문해야해.
            
            질문은 필요한 경우에만 하고 우선은 바로 초안을 생성하도록 해. 고객에게 필요한 정보를 묻고 해당 정보들로 프로세스를 만들어가는게 아니라 고객이 어떠한 프로세스를 생성하고 싶다했을때 그에 맞는 프로세스 초안을 바로 생성해야해.
            프로세스 초안이란 바로 프로세스 정의를 생성하는게 아니라 프로세스의 흐름을 고객에게 설명하는거야.
            프로세스 초안을 생성하고 이후 추가하거나 수정하실 부분이 있으신가요 ? 라는 질문과 같이 고객이 생성된 초안을 개선하여 프로세스 정의를 생성할 수 있도록 해줘야해.
            고객은 최소한의 답변으로 본인이 원하는 프로세스를 생성할 수 있도록 질문하여야하며, 필수적인것만 질문해야해.

            추가적으로 질문이 필요한 경우 복잡하고 어려운 질문들은 고객에게 최대한 하지않도록 해야해. 쉬운 표현과 짧게 질문하도록 해야해. 그리고 고객에게 한번에 하나의 질문만을 하도록 해. 한번에 여러 질문을 받으면 고객입장에서는 대답하기 귀찮아지기때문이야.

            컨설팅 시스템이 고객에게 질문할때에는 프로세스 정의 생성에 필요한 정보만을 질문하도록 해야한다. 프로세스 정의 생성에 불필요하거나 상관없는 질문은 최대한 하지 않도록 만들어야한다. 
            또한 대화가 너무 길어진다고 판단되면 고객에게 "지금 바로 프로세스를 생성하고 싶으시다면 언제든 프로세스 생성이 가능하다. 프로세스 생성을 원하면 생성해달라고 하면 된다."라는 안내를 하는게 좋아
            질문할때는 되도록이면 한번에 하나의 질문만을 하는게 좋다. 너무 많은 질문을 받은 고객은 답변할 의지를 잃어버리기 쉽기때문이다. 
            다시 강조하자면 프로세스 정의 생성에 있어 반드시 필요한 정보만을 질문하고 질문은 한번에 하나의 질문만을 하여 한단계씩 정보를 모아나가도록 가이드해줘야한다.

            컨설팅 시스템에게 고객이 어떤 질문을 해야하는지 조차 모를 수 있기때문에 기존에 종사하던 업종이 무엇인지 어떤 흐름으로 진행되는지 어떤 부분을 개선, 자동화하고 싶은지 이런 순서로 차근차근 질문하여 고객이 쉽게 답변을 할 수 있도록 해야하며 고객의 질문을 이끌어낼 수 있도록 "~ 라는 질문을 해보세요" 이런 식으로 가이드 해야해.

            컨설팅 시스템이 잘못된 질문을 하거나 다른 주제로 질문을 하는 경우 또는 고객에게 혼란이 될 질문을 하는 경우
            "~ 라는 질문은 불필요한 질문이라고 판단됩니다. ~ 라고 질문해보세요" 와 같이 다시 제대로된 질문을 할 수 있도록 알려주어야해. 그렇게 하면 그 조언을 보고 컨설팅 시스템이 알아서 질문을 만들어 낼 거야.

            그리고 자주 발생하는 컨설팅 시스템의 오류가 있는데, 그 오류는 지정해둔 JSON 형식이 아닌 다른 형식으로 답변을 하여 다른 시스템에 오류를 발생시키는 것이다. 그렇기 때문에 모든 조언을 해줄때 마지막에 "지정된 JSON 형식에 맞춰 질문해보세요" 라고 덧붙혀줘.

            컨설팅 시스템이 고객에게 한 질문을 보고 적절한 질문이였는지를 판단하고 적절하지 않은 질문이였다면 그 이유와 개선된 추천 질문을 하도록 컨설팅 시스템에게 알려주어야한다.
            메시지 목록을 보고 개선된 컨설팅 시스템의 질문이 얼추 의미가 비슷하다면 적절하다고 판단해야한다. 부적절이라고 판단할때는 그렇게 판단한 명확한 근거가 있고 컨설팅 시스템의 질문이 과하게 부적절, 불필요 또는 주제와 많이 벗어났을때 그렇게 판단할 수 있다.
            모든 답변은 아래의 JSON 형식을 따라 답변해야한다.
            {
                "validity": "Suitable" || "Unsuitable",
                "content": "컨설팅 시스템의 질문이 부적합한 이유와 개선된 추천 질문" // ~ 때문에 부적합한 질문입니다. 또는 불필요한 질문입니다. 주제와 벗어난 질문입니다. ~ 라고 질문해보세요.
            }
`}]}setContexts(){}setChatRoomData(){}setCalendarData(){}setWorkList(){}createPrompt(){}}const g=_.createBackend();se({objectHash:function(e,s){return"$$index:"+s}});const de={mixins:[F,q,B],name:"ProcessDefinitionChat",components:{Chat:ae,AppBaseCard:ne,ChatListing:ie,ChatDetail:te,ChatProfile:oe,ProcessDefinition:Q,ChatGenerator:y,ProcessDefinitionVersionDialog:W,ProcessDefinitionVersionManager:H,ProcessDefinitionChatHeader:z,ProcessDefinitionConvertModule:B,FormGenerator:re,ProcessExecuteDialog:ee,"process-gpt-execute":Y,DryRunProcess:Z,TestProcess:x},props:{chatMode:{type:String,default:""}},data:()=>({isXmlMode:!1,prompt:"",changedXML:"",path:"proc_def",isChanged:!1,chatInfo:{title:"processDefinition.cardTitle",text:"processDefinition.processDefinitionExplanation"},processDefinitionMap:null,modeler:null,editUser:"",versionDialog:!1,verMangerDialog:!1,deleteDialog:!1,isDeleted:!1,externalSystems:[],validationList:{},executeDialog:!1,isSimulate:"false",waitForCustomer:!1,isConsultingMode:!1}),async created(){$try(async()=>{if(this.chatMode=="consulting"&&(this.isConsultingMode=!0),this.isConsultingMode)this.userInfo=await this.storage.getUserInfo(),this.processDefinitionMap=await g.getProcessDefinitionMap(),this.messages.push({role:"system",content:this.$t("ProcessDefinitionChat.greetingMessage",{name:this.userInfo.name}),timeStamp:Date.now()}),this.generator=new C(this,{isStream:!0,preferredLanguage:"Korean"}),this.EventBus.on("messages-updated",()=>{this.chatRenderKey++});else{if(await this.init(),this.generator=new y(this,{isStream:!0,preferredLanguage:"Korean"}),this.$store.state.messages){const e=JSON.stringify(this.$store.state.messages);this.prompt=`아래 대화 내용에서 프로세스를 유추하여 프로세스 정의를 생성해주세요. 이때 가능한 프로세스를 일반화하여 작성:
                    ${e}.`,this.$store.commit("clearMessages")}if(this.$store.state.editMessages){const e=JSON.stringify(this.$store.state.editMessages);this.prompt=`아래 대화 내용을 보고 기존 프로세스에서 수정 가능한 부분을 유추하여 프로세스 정의를 수정해주세요.
                    ${e}.`,this.$store.commit("clearMessages")}this.fullPath&&this.fullPath!=""&&(this.chatRoomId=this.fullPath),this.validate()}})},watch:{$route:{deep:!0,handler(e,s){if(e.path!==s.path){if(!(e.path.startsWith("/definitions")||e.path.startsWith("/forms")))return;this.messages=[],e.params.pathMatch&&this.init()}}},executeDialog:{handler(e){e===!1&&this.closeModelingDialog()}},versionDialog:{handler(e){e===!1&&this.closeModelingDialog()}},verMangerDialog:{handler(e){e===!1&&this.closeModelingDialog()}}},computed:{fullPath(){let e;return this.$route.params.pathMatch?(e=this.$route.params.pathMatch.join("/"),e.startsWith("/")&&(e=fullPath.substring(1))):e=this.$route.params.id,e},isAdmin(){return localStorage.getItem("isAdmin")==="true"},mode(){return window.$mode}},async beforeRouteLeave(e,s,t){const i=await D().getModeler.saveXML({format:!0,preamble:!0});s.path==="/definitions/chat"&&i&&i.xml&&!this.isViewMode?window.confirm(this.$t("changePath"))?t():t(!1):t()},methods:{executeProcess(){this.isSimulate="false",this.executeDialog=!this.executeDialog},executeSimulate(){console.log("simulate"),this.isSimulate="true",this.executeDialog=!this.executeDialog},closeModelingDialog(){console.log("closeModelingDialog");const e=this.$refs["process-definition"];e&&e.closeModelingDialog()},beforeStartGenerate(){let e=[];this.messages&&this.messages.length>0&&this.messages.forEach(s=>{s.content&&e.push({role:s.role,content:typeof s.content=="string"?s.content:JSON.stringify(s.content)})}),this.generator&&(this.generator.model="gpt-4o"),this.generator.previousMessages=[this.generator.previousMessages[0],...e],this.startGenerate()},async beforeSaveDefinition(e){this.chatMode=="consulting"&&(await this.$emit("createdBPMN",this.processDefinition),e.skipSaveProcMap=!0),this.saveDefinition(e)},showXmlMode(){this.isXmlMode=!this.isXmlMode},beforeDelete(){this.bpmn&&(this.deleteDialog=!0)},async deleteProcess(){var e=this;e.$try({context:e,action:async()=>{await g.deleteDefinition(e.fullPath),e.deleteDialog=!1,e.isDeleted=!0,e.EventBus.emit("definitions-updated"),e.EventBus.emit("instances-updated")}})},handleFileChange(e){let s=this;const t=e.target.files[0];if(!t)return;const o=new FileReader;o.onload=a=>{const i=a.target.result;let n=i,l=n;t.name.indexOf(".jsonold")!=-1&&(n=s.convertOldJson(JSON.parse(i)),l=s.createBpmnXml(n)),s.loadBPMN(l)},o.readAsText(t)},checkedLock(e){var s=this;s.$try({context:s,action:async()=>{const t=await s.getData(`lock/${e}`,{key:"id"});t&&t.id&&t.user_id?(s.editUser=t.user_id,t.user_id==this.userInfo.name?(s.lock=!1,s.disableChat=!1,s.isViewMode=!1):(s.lock=!0,s.disableChat=!0,s.isViewMode=!0)):(s.editUser="",s.lock=!0,s.disableChat=!0,s.isViewMode=!0)}})},toggleLock(){var e=this;e.$try({context:e,action:async()=>{e.lock?(e.processDefinition&&e.useLock&&await e.storage.putObject("lock",{id:e.processDefinition.processDefinitionId,user_id:e.userInfo.name}),e.editUser=e.userInfo.name,e.disableChat=!1,e.isViewMode=!1,e.lock=!1,e.definitionChangeCount++):e.toggleVersionDialog(!0)}})},toggleVerMangerDialog(e){this.verMangerDialog=e},async changeXML(e){var s=this;if(s.mode=="ProcessGPT"){if(!e||!e.id)return;e.xml&&(s.processDefinition=await s.convertXMLToJSON(e.xml)),await s.storage.putObject("proc_def",{id:e.id,name:e.name,bpmn:e.xml,definition:s.processDefinition})}s.bpmn=e.xml,s.definitionChangeCount++,s.toggleVerMangerDialog(!1)},async changeElement(){await this.validate()},async validate(){this.$nextTick(async()=>{const t=await D().getModeler.saveXML({format:!0,preamble:!0});this.validationList=await g.validate(t.xml)})},loadBPMN(e){this.bpmn=e,this.definitionChangeCount++},changeBpmn(e){this.loadBPMN(e)},removePositionKey(e){if(Array.isArray(e))return e.map(s=>removePositionKey(s));if(typeof e=="object"&&e!==null){const s={};return Object.keys(e).forEach(t=>{t!=="position"&&(s[t]=removePositionKey(e[t]))}),s}return e},async updateDefinition(){let t=await D().getModeler.saveXML({format:!0,preamble:!0});console.log(t.xml),this.bpmn=t.xml,this.definitionChangeCount++,this.isChanged=!0},async loadData(e){const s=this;try{const t=await g.getSystemList();t&&t.forEach(async i=>{const n=await g.getSystem(i.name.replace(".json",""));s.externalSystems.push(n)}),s.isDeleted=!1;let o=s.$route.params.pathMatch.join("/");o.startsWith("/")&&(o=o.substring(1));let a=this.$route.params.pathMatch[this.$route.params.pathMatch.length-1];if(o&&a!="chat"){let i=await g.getRawDefinition(o,{type:"bpmn"}),l=D().getModeler,h;if(i&&(s.bpmn=i,h=l.getDefinitions(),s.definitionChangeCount++),s.useLock){const u=await g.getRawDefinition(o);u&&(s.processDefinition=u.definition,s.processDefinition.processDefinitionId=u.id,s.processDefinition.processDefinitionName=u.name,s.projectName=u.name?u.name:s.processDefinition.processDefinitionName),s.checkedLock(a)}else s.processDefinition=await s.convertXMLToJSON(s.bpmn),s.processDefinition.processDefinitionId=o,s.processDefinition.processDefinitionName=o,s.projectName=h.name?h.name:s.processDefinition.processDefinitionName}else if(a=="chat"){if(s.projectName=null,s.bpmn=null,s.processDefinition=await s.convertXMLToJSON(s.bpmn),s.$route.query&&s.$route.query.id&&(s.processDefinition={processDefinitionId:s.$route.query.id.replace(".bpmn","")},s.$route.query.name&&(s.projectName=s.$route.query.name.replace(".bpmn",""),s.processDefinition.processDefinitionName=s.projectName),window.$mode=="uEngine")){let i=await g.getRawDefinition(s.processDefinition.processDefinitionId,{type:"bpmn"});i&&(s.bpmn=i)}s.lock=!1,s.disableChat=!1,s.isViewMode=!1,s.definitionChangeCount++}s.$route.query&&s.$route.query.modeling&&(document.title=s.projectName),s.processDefinitionMap=await g.getProcessDefinitionMap()}catch(t){console.log(t),alert(t)}},beforeSendMessage(e){this.waitForCustomer=!1,this.isConsultingMode||(this.generator=new y(this,{isStream:!0,preferredLanguage:"Korean"}),this.generator.client.genType="proc_def",this.processDefinitionMap&&this.generator.setProcessDefinitionMap(this.processDefinitionMap),this.processDefinition&&this.generator.setProcessDefinition(this.processDefinition)),this.sendMessage(e)},async afterModelCreated(e){let s;try{if(typeof e=="string")try{s=JSON.parse(e)}catch{try{s=M(e),s&&Object.keys(s).length!==0&&(s=M(e+'"'))}catch{s=this.extractJSON(e);try{s=JSON.parse(s)}catch{s=M(s)}}}else s=e;if(s){let t=s;this.isConsultingMode?t&&(this.messages[this.messages.length-1].disableMsg=!0,t.validity&&t.validity=="Suitable"&&(this.messages[this.messages.length-2].disableMsg=!1)):t.processDefinitionId&&(this.processDefinition=t,this.bpmn=this.createBpmnXml(this.processDefinition),this.definitionChangeCount++)}}catch(t){console.log(s),console.log(t)}},parseJsonProcess(e){return new Promise((s,t)=>{try{const o=JSON.parse(e);s(o)}catch(o){console.log(o);const a=3;let i=0;(async()=>{i<a?(console.log("retrying parse json process"),i++,s(M(e))):t(o)})()}})},async afterGenerationFinished(e){let s=null;if(typeof e=="string")try{s=await this.parseJsonProcess(e)}catch{try{s=await this.parseJsonProcess(e),s&&Object.keys(s).length!==0&&(s=await this.parseJsonProcess(e+'"'))}catch{s=this.extractJSON(e);try{s=JSON.parse(s)}catch{s=M(s)}}}else s=e;if(s){let t=s;if(this.isConsultingMode){let o;t&&(o=t.content,this.messages[this.messages.length-1].content=o,t.validity&&t.validity=="Suitable"?(this.messages.pop(),this.generator=new C(this,{isStream:!0,preferredLanguage:"Korean"})):(t.answerType&&t.answerType=="generateProcessDef"?(this.generator=new y(this,{isStream:!0,preferredLanguage:"Korean"}),this.isConsultingMode=!1,this.waitForCustomer=!0,this.$emit("openProcessPreview")):t.validity&&t.validity=="Unsuitable"?this.generator=new C(this,{isStream:!0,preferredLanguage:"Korean"}):this.generator=new le(this,{isStream:!0,preferredLanguage:"Korean"}),this.beforeStartGenerate()))}if(!this.isConsultingMode){t.megaProcessId&&this.processDefinitionMap&&this.processDefinitionMap.mega_proc_list&&(this.processDefinitionMap.mega_proc_list.some(i=>i.name==t.megaProcessId)||this.processDefinitionMap.mega_proc_list.push({name:t.megaProcessId,id:t.megaProcessId,major_proc_list:[{name:t.majorProcessId,id:t.majorProcessId,sub_proc_list:[{id:t.processDefinitionId,name:t.processDefinitionName}]}]}),t.majorProcessId&&this.processDefinitionMap.mega_proc_list.forEach(i=>{if(i.name==t.megaProcessId)if(i.major_proc_list.some(n=>n.name==t.majorProcessId)){const n=i.major_proc_list.findIndex(l=>l.name==t.majorProcessId);i.major_proc_list[n].sub_proc_list.some(l=>l.id==t.processDefinitionId)||i.major_proc_list[n].sub_proc_list.push({id:t.processDefinitionId,name:t.processDefinitionName})}else i.major_proc_list.push({name:t.majorProcessId,id:t.majorProcessId,sub_proc_list:[{id:t.processDefinitionId,name:t.processDefinitionName}]})}));const a=D().getModeler;if(t.modifications){for(let i of t.modifications)if(i.action=="replace")this.jsonPathReplace(this.processDefinition,i.targetJsonPath,i.value),console.log(this.processDefinition),this.bpmn=this.createBpmnXml(this.processDefinition);else if(i.action=="add"){this.modificationAdd(i),this.modificationElement(i,a);let n=await a.saveXML({format:!0,preamble:!0});this.bpmn=n.xml,console.log("done")}else if(i.action=="delete"){this.modificationRemove(i,a);let n=await a.saveXML({format:!0,preamble:!0});this.bpmn=n.xml}this.definitionChangeCount++}await this.checkedFormData(),this.isChanged=!0}}else this.isConsultingMode&&(this.messages[this.messages.length-1].role=="system"&&this.messages.pop(),this.generator=new C(this,{isStream:!0,preferredLanguage:"Korean"}),this.beforeStartGenerate())},afterModelStopped(e){},async saveToVectorStore(e){await new K.VectorStorage({openAIApiKey:this.openaiToken}).addText(JSON.stringify(e),{category:e.processDefinitionId})},generateElement(e,s,t,o,a,i,n){var l=this;const h=l.getComponentByName(e);return h?(i||(i=l.uuid()),s||(s=500),t||(s=500),n||(n=null),h.computed.createNew(n,i,s,t,o,a)):null},getComponentByName:function(e){var s;return $.each(window.bpmnComponents,function(t,o){o.default.name==e&&(s=o)}),s}}},ce={style:{display:"none"}},me={style:{position:"relative"}},fe={key:0,class:"text-h5 font-weight-semibold pa-3",style:{"background-color":"white"}},pe={key:0,class:"no-scrollbar"},ge={key:1};function he(e,s,t,o,a,i){const n=f("process-definition"),l=f("Chat"),h=f("process-definition-version-dialog"),u=f("ProcessDefinitionVersionManager"),X=f("Icons"),v=f("ProcessDefinitionChatHeader"),A=f("AppBaseCard"),E=f("process-gpt-execute"),O=f("test-process"),R=f("dry-run-process");return c(),p(b,{elevation:"10",style:{"background-color":"rgba(255, 255, 255, 0)"},class:U({"is-deleted":e.isDeleted,"user-left-part":!i.isAdmin})},{default:d(()=>[e.isConsultingMode?(c(),p(b,{key:0},{default:d(()=>[(c(),P("div",{key:e.chatRenderKey},[k("div",ce,[(c(),p(n,{class:"process-definition-resize",bpmn:e.bpmn,key:e.definitionChangeCount,isViewMode:!0,isXmlMode:e.isXmlMode,definitionPath:i.fullPath,definitionChat:this,onUpdate:i.updateDefinition},null,8,["bpmn","isXmlMode","definitionPath","onUpdate"]))]),k("div",me,[r(l,{messages:e.messages,userInfo:e.userInfo,agentInfo:e.agentInfo,type:"consulting",ProcessGPTActive:e.ProcessGPTActive,onRequestDraftAgent:e.requestDraftAgent,onRequestFile:e.requestFile,onBeforeReply:e.beforeReply,onSendMessage:i.beforeSendMessage,onStartProcess:e.startProcess,onCancelProcess:e.cancelProcess,onDeleteWorkList:e.deleteWorkList,onDeleteAllWorkList:e.deleteAllWorkList,onSendEditedMessage:e.sendEditedMessage,onStopMessage:e.stopMessage,onToggleProcessGPTActive:e.toggleProcessGPTActive},null,8,["messages","userInfo","agentInfo","ProcessGPTActive","onRequestDraftAgent","onRequestFile","onBeforeReply","onSendMessage","onStartProcess","onCancelProcess","onDeleteWorkList","onDeleteAllWorkList","onSendEditedMessage","onStopMessage","onToggleProcessGPTActive"])])]))]),_:1})):(c(),p(A,{key:1},{leftpart:d(()=>[i.isAdmin?w("",!0):(c(),P("h5",fe,S(e.projectName),1)),(c(),p(n,{ref:"process-definition",class:"process-definition-resize",bpmn:e.bpmn,processDefinition:e.processDefinition,key:e.definitionChangeCount,isViewMode:e.isViewMode,isXmlMode:e.isXmlMode,definitionPath:i.fullPath,definitionChat:this,validationList:e.validationList,isAdmin:i.isAdmin,generateFormTask:e.generateFormTask,onUpdate:i.updateDefinition,onChange:i.changeElement,onChangeBpmn:i.changeBpmn},null,8,["bpmn","processDefinition","isViewMode","isXmlMode","definitionPath","validationList","isAdmin","generateFormTask","onUpdate","onChange","onChangeBpmn"])),r(h,{process:e.processDefinition,loading:e.loading,open:e.versionDialog,definitionPath:i.fullPath,processName:e.projectName,type:"bpmn",onClose:e.toggleVersionDialog,onSave:i.beforeSaveDefinition},null,8,["process","loading","open","definitionPath","processName","onClose","onSave"]),r(u,{process:e.processDefinition,open:e.verMangerDialog,type:"bpmn",onClose:i.toggleVerMangerDialog,onChangeXML:i.changeXML},null,8,["process","open","onClose","onChangeXML"]),r(j,{modelValue:e.deleteDialog,"onUpdate:modelValue":s[1]||(s[1]=m=>e.deleteDialog=m),"max-width":"500"},{default:d(()=>[r(b,{class:"pa-4"},{default:d(()=>[r(I,{class:"ma-0 pa-0 mb-8"},{default:d(()=>[r(G,{class:"ma-0 pa-0",style:{"font-size":"24px"}},{default:d(()=>[N(S(e.$t("processDefinition.deleteProcessMessage")),1)]),_:1}),r(L),r(V,{onClick:s[0]||(s[0]=m=>e.deleteDialog=!1),icon:"",variant:"text",density:"comfortable",style:{"margin-top":"-8px"}},{default:d(()=>[r(X,{icon:"close",size:16})]),_:1})]),_:1}),r(I,{class:"ma-0 pa-0"},{default:d(()=>[r(L),r(V,{color:"error",rounded:"",variant:"flat",onClick:i.deleteProcess},{default:d(()=>[N(S(e.$t("processDefinition.delete")),1)]),_:1},8,["onClick"])]),_:1})]),_:1})]),_:1},8,["modelValue"])]),rightpart:d(()=>[i.isAdmin?(c(),P("div",pe,[r(l,{prompt:e.prompt,name:e.projectName,messages:e.messages,chatInfo:e.chatInfo,userInfo:e.userInfo,lock:e.lock,disableChat:e.disableChat,chatRoomId:e.chatRoomId,onSendMessage:i.beforeSendMessage,onSendEditedMessage:e.sendEditedMessage,onStopMessage:e.stopMessage},{"custom-title":d(()=>[r(v,{modelValue:e.projectName,"onUpdate:modelValue":s[2]||(s[2]=m=>e.projectName=m),bpmn:e.bpmn,fullPath:i.fullPath,lock:e.lock,editUser:e.editUser,userInfo:e.userInfo,isXmlMode:e.isXmlMode,onHandleFileChange:i.handleFileChange,onToggleVerMangerDialog:i.toggleVerMangerDialog,onExecuteProcess:i.executeProcess,onExecuteSimulate:i.executeSimulate,onToggleLock:i.toggleLock,onShowXmlMode:i.showXmlMode,onBeforeDelete:i.beforeDelete},null,8,["modelValue","bpmn","fullPath","lock","editUser","userInfo","isXmlMode","onHandleFileChange","onToggleVerMangerDialog","onExecuteProcess","onExecuteSimulate","onToggleLock","onShowXmlMode","onBeforeDelete"])]),_:1},8,["prompt","name","messages","chatInfo","userInfo","lock","disableChat","chatRoomId","onSendMessage","onSendEditedMessage","onStopMessage"])])):w("",!0)]),mobileLeftContent:d(()=>[i.isAdmin?(c(),p(l,{key:0,prompt:e.prompt,name:e.projectName,messages:e.messages,chatInfo:e.chatInfo,userInfo:e.userInfo,lock:e.lock,disableChat:e.disableChat,chatRoomId:e.chatRoomId,onSendMessage:i.beforeSendMessage,onSendEditedMessage:e.sendEditedMessage,onStopMessage:e.stopMessage},{"custom-title":d(()=>[r(v,{modelValue:e.projectName,"onUpdate:modelValue":s[3]||(s[3]=m=>e.projectName=m),bpmn:e.bpmn,fullPath:i.fullPath,lock:e.lock,editUser:e.editUser,userInfo:e.userInfo,isXmlMode:e.isXmlMode,onHandleFileChange:i.handleFileChange,onToggleVerMangerDialog:i.toggleVerMangerDialog,onExecuteProcess:i.executeProcess,onExecuteSimulate:i.executeSimulate,onToggleLock:i.toggleLock,onShowXmlMode:i.showXmlMode,onBeforeDelete:i.beforeDelete},null,8,["modelValue","bpmn","fullPath","lock","editUser","userInfo","isXmlMode","onHandleFileChange","onToggleVerMangerDialog","onExecuteProcess","onExecuteSimulate","onToggleLock","onShowXmlMode","onBeforeDelete"])]),_:1},8,["prompt","name","messages","chatInfo","userInfo","lock","disableChat","chatRoomId","onSendMessage","onSendEditedMessage","onStopMessage"])):w("",!0)]),_:1})),r(j,{modelValue:e.executeDialog,"onUpdate:modelValue":s[7]||(s[7]=m=>e.executeDialog=m),"max-width":"80%"},{default:d(()=>[i.mode==="ProcessGPT"?(c(),p(E,{key:0,definitionId:i.fullPath,onClose:s[4]||(s[4]=m=>e.executeDialog=!1)},null,8,["definitionId"])):(c(),P("div",ge,[e.isSimulate=="true"?(c(),p(O,{key:0,definitionId:i.fullPath,onClose:s[5]||(s[5]=m=>e.executeDialog=!1)},null,8,["definitionId"])):(c(),p(R,{key:1,"is-simulate":e.isSimulate,definitionId:i.fullPath,onClose:s[6]||(s[6]=m=>e.executeDialog=!1)},null,8,["is-simulate","definitionId"]))]))]),_:1},8,["modelValue"])]),_:1},8,["class"])}const Je=J(de,[["render",he],["__scopeId","data-v-68607994"]]);export{Je as default};
