-@ val model: ClusterType
-@ val createMode: Boolean = false
-@ val __servers: List[String] = Nil
-@ val __templates: List[String] = Nil
-@ val __nodeNames: List[String] = Nil
-@ val __dataSources: List[String] = Nil
-@ val __customResourceRefs: List[String] = Nil
-@ val __externalResourceRefs: List[String] = Nil
-@ val __usedDynamic: Boolean = false
-@ val __checkservers: List[String] = Nil

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:clusters.cluster.title"))
	- J.base = "domain.clusters.cluster"
	- render("/WEB-INF/scalate/menu/cluster.scaml", Map("selected" -> 0, "disabled" -> createMode))

	%form(method="post" action="#{requestUri}")
		- J.render("createMode")

		- J.render("fieldIcons")
		- J.render("buttons")

		- J.layout("basic")
			.table
				- J.field(schema = ".name")
					- if (createMode)
						- J.input()
					- else
						= model.getName
			- J.group(label = "message:common.servers.label")
				.table
				- J.group(schema = ".servers", noBinding = false, attributes = Map("front" -> "hidechoice", "choiceGroup" -> "server"))
					.table
						- J.field(schema = ".server-name")
							- if (__servers == Nil)
								= S.message("common.noExist.entry")
							- else if(__usedDynamic && hasLock)
								- J.checkboxes(options = __checkservers)
							- else
								- J.checkboxes(options = __servers)
				- J.group(schema = ".dynamic-servers", noBinding = false, attributes = Map("front" -> "hidechoice", "choiceGroup" -> "server"))
					.table
						- J.field(schema = ".server-count")
							- J.input()
						- J.field(schema = ".server-name-prefix")
							- J.input()
						- J.field(schema = ".base-listen-port")
							- J.input()
						- J.field(schema = ".http-listen-port")
							- J.input()
						- J.field(schema = ".jms-listen-port")
							- J.input()
						- J.field(schema = ".listen-port-step")
							- J.input()
						- J.field(schema = ".server-template-name")
							- J.select(options = S.options(__templates, model.getDynamicServers().getServerTemplateName()), attributes = Map("disabled" -> !hasLock))				
					- J.group(schema = ".node-names")
						.table
							- J.field(schema = ".node-name", required=false)
								- val cds = model.getDynamicServers().getNodeNames()
								- val dest: List[String] = if(cds == null) Nil else cds.getNodeName().asScala.toList
								- J.render("orderedSelect", Map("name" -> "dynamicServers.nodeNames.nodeName", "src" -> __nodeNames, "dest" -> dest))
			- J.group(schema = ".cluster-wide-timer-service", noBinding = false, attributes = Map("tail" -> "checkboxForGroup"))
				.table
				- J.group(schema = ".database-setting")
					.table
						- J.field(schema = ".db-vendor")
							- J.select()
						- J.field(schema = ".data-source-id")
							- J.input()
			- J.group(schema = ".data-sources")
				.table
					- J.field(schema = ".data-source")
						- if (__dataSources == null)
							= S.message("common.noExist.entry")
						- else
							- var __checkedDataSources: List[String] = if(model.isSetDataSources) model.getDataSources.getDataSource.asScala.toList else Nil
							= Table.render(null, __dataSources)
								- case 0 =>
									- Item.checkallCustom(".tableType", name = "dataSources.dataSource", col = "30px", disabled = !hasLock)
										- row =>
											- (row, !hasLock, __checkedDataSources.contains(row))
								- case 1 =>
									- Item("message:header.data-source-id", col = "550px")
										- (index, row) =>
											= row
			- J.group(schema = ".custom-resource-refs")
				.table
					- J.field(schema = ".name")
						- if (__customResourceRefs == Nil)
							= S.message("common.noExist.entry")
						- J.checkboxes(options = __customResourceRefs)
			- J.group(schema = ".external-resource-refs")
				.table
					- J.field(schema = ".name")
						- if (__externalResourceRefs == Nil)
							= S.message("common.noExist.entry")
						- J.checkboxes(options = __externalResourceRefs)

		- J.layout("advanced")
			.table
			- J.group(schema = "")
				.table
					- J.field(schema = ".use-MEJB")
						- J.checkbox()
					- J.field(schema = ".class-ftp")
						- J.checkbox()
				- J.group(schema = ".enable-interop", noBinding = false, attributes = Map("tail" -> "checkboxForGroup"))
					.table
					- J.group(schema = ".interop-ssl-config")
						.table
							- J.field(schema = ".keystore-path")
								- J.input()
							- J.field(schema = ".keystore-alias")
								- J.input()
							- J.field(schema = ".keystore-password")
								- J.password()
							- J.field(schema = ".keystore-keypassword")
								- J.password()
							- J.field(schema = ".truststore-path")
								- J.input()
							- J.field(schema = ".truststore-password")
								- J.password()

		.lineBar
		- J.render("buttons")
