- import jeus.tool.webadmin.controller.monitoring.statistic._

-@ val model: Chart

- layout("/scalate/layouts/main.scaml", Map("description" -> "message:monitoring.statistic.description", "title" -> "message:monitoring.statistic.title", "help" -> "monitoring.statistic.chart"))
	- J.header
		%link(rel="text/css" rel="stylesheet" href="#{contextPath}/resources/css/nv.d3.css")
		%link(rel="text/css" rel="stylesheet" href="#{contextPath}/resources/less/statistic.css")

	- render("/scalate/menu/monitoring/statistic.scaml", Map("selected" -> 3, "name" -> model.name))

	#chart
		%svg

	- def renderStat(key: String, stat: Statistic)
		- def item(name: String, value: Long, checked: Boolean = false)
			- val id = s"$key|$name"
			%dt
				%input.checkStat{:type => "checkbox", :value => id, :checked => checked}
				= name
			%dd
				= value
		%dl.values
			-# %dt
			-# 	startTime
			-# %dd
			-# 	= stat.startTime
			-# %dt
			-# 	lastSampleTime
			-# %dd
			-# 	= stat.lastSampleTime
			- stat match
				- case s: CountStatistic =>
					- item("count", s.count, true)
				- case s: TimeStatistic =>
					- item("count", s.count, true)
					- item("minTime", s.minTime)
					- item("maxTime", s.maxTime)
					- item("totalTime", s.totalTime)
				- case s: BoundedRangeStatistic =>
					- item("current", s.current, true)
					- item("highWaterMark", s.highWaterMark)
					- item("lowWaterMark", s.lowWaterMark)
					- item("upperBound", s.upperBound)
					- item("lowerBound", s.lowerBound)
				- case s: RangeStatistic =>
					- item("current", s.current, true)
					- item("highWaterMark", s.highWaterMark)
					- item("lowWaterMark", s.lowWaterMark)
				- case s: BoundaryStatistic =>
					- item("upperBound", s.upperBound)
					- item("lowerBound", s.lowerBound)

	- J.group(label = "message:monitoring.statistic.preset.stats.label")
		%table.tableType#stats
			%colgroup
				%col/
				%col(style="width:150px;")/
				%col(style="width:300px;")/
			%tbody
				- model.stats.groupBy(_.objectName).toList.sortWith(_._1 < _._1).foreach
					- case (objectName, stats) =>
						%tr(colspan="3")
							%td.first(colspan="3")
								= objectName
							- stats.map{s => (s.key, s.value)}.sortWith(_._2.name < _._2.name).foreach
								- case (key, stat) =>
									%tr
										%td.first
											= stat.name
										%td
											= stat.unit
										%td(rowspan="2")
											- renderStat(key, stat)
									%tr		
										%td.first(colspan="2")
											= stat.description


	- J.init
		- import jeus.tool.webadmin.Settings
		- val settings: Settings = S.eval[Settings]("@settings")
		:&plain
			require(["page/monitoring/statistic/chart"], function(chart){
				chart("#{requestUri}/data", #{settings.monitoringStatisticInterval}, #{settings.monitoringStatisticMaxCount});
			});