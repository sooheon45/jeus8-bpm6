-@ val model: SchedulerType
-@ val serverName: String


-@ val isAutoed: Boolean = false

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:servers.scheduler.title"))
	- J.base = "domain.servers.server.scheduler"
	- val isReadonly = if(isAutoed) true else false
	- render("/WEB-INF/scalate/menu/server.scaml", Map("first" -> 1, "second" -> 3))

	%form(method="post" action="#{requestUri}")

		- J.render("fieldIcons")
		
		- var basic = "disabledbasic"
		- if(!isReadonly)
			- J.render("buttons", Map("addition" -> List("delete")))
			- basic = "basic"
			
		- J.layout(basic)
			.table
				- J.field(schema = ".enabled")
					- J.checkbox()

		- J.layout("advanced")
			.table
			- J.group(schema = ".pooling", noBinding = false, attributes = Map("tail" -> "checkboxForGroup"))
				.table
				- J.group(schema = ".shared", noBinding = false, attributes = Map("front" -> "choice", "choiceGroup" -> "poolingGroup"))
					.table
						- J.field(schema = ".reserved-thread-num")
							- J.input()
				- J.group(schema = ".dedicated", noBinding = false, attributes = Map("front" -> "choice", "choiceGroup" -> "poolingGroup"))
					.table
						- J.field(schema = ".min")
							- J.input()
						- J.field(schema = ".max")
							- J.input()
						- J.field(schema = ".keep-alive-time")
							- J.input()
							%span.unit = S.message("common.ms")
						- J.field(schema = ".queue-size")
							- J.input()
					- J.group(schema = ".stuck-thread-handling")
						.table
							- J.field(schema = ".max-stuck-thread-time")
								- J.input()
								%span.unit = S.message("common.ms")
							- J.field(schema = ".action-on-stuck-thread")
								- J.select()
							- J.field(schema = ".stuck-thread-check-period")
								- J.input()
								%span.unit = S.message("common.ms")

		.lineBar
		- if(!isReadonly)	
			- J.render("buttons", Map("addition" -> List("delete")))

	%h2.title
		= S.message("servers.job.title")
	- val jobs: List[JobType] = if(model.getJobList() == null) Nil else model.getJobList().getJob().asScala.toList
	= Table.render(null, jobs)
		- case 1 =>
			- Item("message:header.name", "150px")
				- (index, row) =>
					- val url = J.buildUri("/servers/{server}/resource/scheduler/job/{name}", serverName, row.getName())
					%a(href="#{url}") = row.getName()
		- case 2 =>
			- Item("message:header.class-name", "150px")
				- (index, row) =>
					= row.getClassName
		- case 3 =>
			- Item("message:header.begin-time")
				- (index, row) =>
					= row.getBeginTime
		- case 4 =>
			- Item("message:header.end-time")
				- (index, row) =>
					= row.getEndTime
		- case 5 =>
			- Item("message:header.interval", "90px")
				- (index, row) =>
					- if(row.getInterval().getMillisecond() != null)
						= row.getInterval().getMillisecond()
						%span.unit = S.message("common.ms")
					- else if(row.getInterval().getMinutely() != null)
						= row.getInterval().getMinutely()
						%span.unit = S.message("common.m")				
					- else if(row.getInterval().getHourly() != null)
						= row.getInterval().getHourly()
						%span.unit = S.message("common.h")				
					- else if(row.getInterval().getDaily() != null)
						= row.getInterval().getDaily()
						%span.unit = S.message("common.d")				
		- case 6 =>
			- Item("message:header.count", "90px")
				- (index, row) =>
					= row.getCount
		- case 7 =>
			- Item("90px", List("center"),
				- Head
					- () =>
						- val url = J.buildUri("/servers/{server}/resource/scheduler/job", serverName)
						- J.render("formButton", Map("label" -> "message:common.add.button", "action" -> url, "name" -> "create", "cssClass" -> "bt_add", "disabled" -> {!hasLock || isReadonly}))
			- )
				- (index, row) =>
					- val url = J.buildUri("/servers/{server}/resource/scheduler/job/{name}", serverName, row.getName())
					- J.render("formButton", Map("label" -> "message:common.remove.button", "action" -> url, "method" -> "delete", "cssClass" -> "bt_del", "disabled" -> {!hasLock || isReadonly}))
