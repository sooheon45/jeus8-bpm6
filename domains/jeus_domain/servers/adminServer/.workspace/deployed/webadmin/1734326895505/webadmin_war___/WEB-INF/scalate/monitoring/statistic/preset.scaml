- import jeus.tool.webadmin.controller.monitoring.statistic.Preset
- import jeus.tool.webadmin.controller.monitoring.statistic.Stat
- import jeus.tool.webadmin.controller.monitoring.statistic.MBean

-@ val model: Preset
-@ val createMode: Boolean = false
-@ val monitoringItems: List[(String, String, MBean)] = Nil

- layout("/scalate/layouts/main.scaml", Map("description" -> "message:monitoring.statistic.preset.description", "title" -> "message:monitoring.statistic.preset.title", "help" -> "monitoring.statistic.preset"))
	- J.header
		%link(rel="text/css" rel="stylesheet" href="#{contextPath}/resources/css/ui.fancytree.css")
		%link(rel="text/css" rel="stylesheet" href="#{contextPath}/resources/less/statistic.css")

	- render("/scalate/menu/monitoring/statistic.scaml", Map("selected" -> 2, "name" -> model.name))

	- val noPermission = !SS.anyGranted(List("ROLE_MONITORING"))
	%form(method="post" action="#{requestUri}")
		- J.render("createMode")
		- if(!noPermission)
			- if(createMode)
				- J.render("buttons", Map("useLock" -> false))
			- else
				- J.render("buttons", Map("useLock" -> false, "addition" -> List("chart")))

		- J.layout("basic")
			.table
				- if(!createMode)
					- J.field(label = "message:monitoring.statistic.preset.id.label", description = "message:monitoring.statistic.preset.id.description", path = "id")
						= model.id
						- S.hidden()
				- J.field(path = "name", label = "message:monitoring.statistic.preset.name.label", description = "message:monitoring.statistic.preset.name.description")
					- S.input(attributes = Map("disabled" -> noPermission))
				- J.field(path = "description", label = "message:monitoring.statistic.preset.description.label", description = "message:monitoring.statistic.preset.description.description")
					- S.textarea(attributes = Map("disabled" -> noPermission))
				- J.field(noBinding = true, label = "message:monitoring.statistic.preset.stats.label", description = "message:monitoring.statistic.preset.stats.description")
					#stats-container
						- model.stats.sortWith(_ < _).foreach
							- stat =>
								%label
									%input{:type => "checkbox", :name => "stats", :value => stat, :checked => true, :disabled => noPermission}
									= Stat(stat).toString
								%br/
			- if(!noPermission)
				- J.group(label = "message:monitoring.statistic.preset.monitoringItems.label", description = "message:monitoring.statistic.preset.monitoringItems.description")
					- def renderMBean(name: String, mbean: MBean)
						%li
							= name
							%ul
								- mbean.statistics match 
									- case null => 
									- case stats => 
										- stats.foreach
											- stat =>
												- val value = mbean.objectName + "|" + stat._2
												%li.statistic{"data-stat" => value, "data-stat.label" => {Stat(value).toString}}
													%span
														%span.name
															= stat._2
														%span.unit
															= "[" + stat._4 + "]"
														-# %span.type
														-# 	= "[" + stat._1	+ "]"					
														%p.description
															= stat._3
								- renderMBeans(mbean.children)
					- def renderMBeans(mbeans: List[MBean])
						- mbeans.groupBy(_.mBeanType).foreach 
							- case (group, children) =>
								- children match
									- case head :: Nil =>
										- renderMBean(group, head)
									- case children =>
										%li
											= group
											%ul
												- children.foreach
													- child =>
														- renderMBean(child.name, child)	
					.monitoringItems
						%ul(style="display:none;")
							- monitoringItems.foreach
								- item =>
									- renderMBean(item._3.name, item._3)

		.lineBar
		- if(!noPermission)
			- if(createMode)
				- J.render("buttons", Map("useLock" -> false))
			- else
				- J.render("buttons", Map("useLock" -> false, "addition" -> List("chart")))
			- J.init
				require(['page/monitoring/statistic/preset']);
