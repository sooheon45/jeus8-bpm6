- import jeus.tool.webadmin.controller.CreateLifecycleInvocationType

-@ val createMode: Boolean = false
-@ val model: CreateLifecycleInvocationType
-@ val serverName: String



-@ val isAutoed: Boolean = false

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:server.lifecycle-invocation.title"))
	- J.base = "domain.servers.server.lifecycle-invocation"
	- val isReadonly = if(!createMode && isAutoed) true else false
	- render("/WEB-INF/scalate/menu/server.scaml", Map("first" -> 1, "second" -> 4))

	%form(method="post" action="#{requestUri}")
		- J.render("createMode")

		- J.render("fieldIcons")
		
		- var basic = "disabledbasic"
		- if(!isReadonly)
			- J.render("buttons")
			- basic = "basic"

		- J.layout(basic)
			.table
				- J.field(schema = ".class-name", path = "lifecycleInvocation.className")
					- if (createMode)
						- J.input()
					- else
						= model.lifecycleInvocation.getClassName()
			- J.group(schema = ".invocation")
				.table
					- J.field(schema = ".invocation-type")
						- J.select()
					- J.field(schema = ".invocation-argument")
						- J.textarea()
				- J.group(schema = ".invocation-method")
					.table
						- J.field(schema = ".method-name")
							- if (createMode)
								- J.input()
							- else
								= model.invocation.getInvocationMethod.getMethodName
								- J.hidden()
						- J.field(schema = ".method-params.method-param")
							- J.textarea()


		.lineBar
		- if(!isReadonly)
			- J.render("buttons")

