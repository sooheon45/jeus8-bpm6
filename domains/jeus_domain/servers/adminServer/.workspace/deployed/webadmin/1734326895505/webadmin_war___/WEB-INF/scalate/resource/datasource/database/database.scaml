-@ val createMode: Boolean = false
-@ val model: DatabaseType
-@ val dataSourceTemplate: List[Map[String, Any]] = Nil

- val vendors: Set[String] = dataSourceTemplate.map(_.getOrElse("vendor", "").toString).filter(_ != "").toSet
- val vendorMap: Map[String, String] = VendorType.values().map{v => v.toString -> v.value()}.toMap

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:resources.database.title"))
	- J.base = "domain.resources.data-source.database"
	- render("/WEB-INF/scalate/menu/resource/datasource.scaml", Map("selected" -> 0, "disabled" -> createMode))

	%form(method="post" action="#{requestUri}")
		- J.render("createMode")

		- J.render("fieldIcons")
		- J.render("buttons")

		- J.layout("basic")
			.table
				- J.field(schema = ".data-source-id")
					- if (createMode)
						- J.input()
					- else
						= model.getDataSourceId
				- J.field(schema = ".export-name")
					- J.input()
				- J.field(schema = ".vendor")
					- J.select()
					- J.dialogWithFunction("button", Map("label" -> "message:common.input.button", "cssClass" -> "btn_type03", "btype" -> "button", "disabled" -> !hasLock))
						- (dialogId: String) =>
							.title.txt_title01
								= S.message("resources.databasetemplate.title")
							%form
								- J.layout("basic")
									.table
										- J.field(label = "message:domain.resources.data-source.database.vendor.label")
											%select#vendor
												%option
												- vendors.foreach
													- vendor =>
														%option(value="#{vendor}") = vendorMap(vendor)
												
										- J.field(label = "message:common.type.label")
											%select#type
							- J.init
								:&plain
									require(["page/database"], function(database){
										var templates = #{Unescaped(Utils.serialize(dataSourceTemplate))};
										database("#{dialogId}", templates);
									});

			
				- J.field(schema = ".data-source-class-name")
					- J.input()
				- J.field(schema = ".data-source-type")
					- J.select()
				- J.field(schema = ".server-name")
					- J.input()
				- J.field(schema = ".port-number")
					- J.input()
				- J.field(schema = ".database-name")
					- J.input()
				- J.field(schema = ".user")
					- J.input()
				- J.field(schema = ".password")
					- J.password(useSHA = false)
				- J.field(schema = ".support-xa-emulation")
					- J.checkbox()

		- J.layout("advanced")
			.table
				- J.field(schema = ".description")
					- J.input()
				- J.field(schema = ".login-timeout")
					- J.input()
					%span.unit s
				- J.field(schema = ".isolation-level")
					- J.select()
				- J.field(schema = ".auto-commit")
					- J.select()
				- J.field(schema = ".stmt-query-timeout")
					- J.input()
					%span.unit = S.message("common.ms")
				- J.field(schema = ".pool-destroy-timeout")
					- J.input()
					%span.unit = S.message("common.ms")
				- J.field(example = "message:common.ex.nameType_equal_value", schema = ".property")
					- J.textarea()
				- J.field(schema = ".action-on-connection-leak")
					- J.select()

		.lineBar
		- J.render("buttons")
