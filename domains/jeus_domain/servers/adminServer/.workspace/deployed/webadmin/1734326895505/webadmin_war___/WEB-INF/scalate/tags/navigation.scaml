- import java.io.{File => JFile}
- import jeus.tool.webadmin.Environment

-@ val targetId: String = null

-@ val currentPath: String = S.eval[Environment]("@j_env").jeusHome

-@ val updateUrl: String = J.buildUri("/navigation")

-@ val directoryOnly: Boolean = false

-@ val multiple: Boolean = false

-
	trait IFile {
		val name: String

		val absolutePath: String

		val directory: Boolean

		val parents: List[IFile]

		val children: List[IFile]
	}

	case class File(file: JFile) extends IFile {

	    val name: String = file.getName match {
	    	case null | "" => 
	    		file.getPath match {
	    			case null | "" | "/" => System.getProperty("user.name")
	    			case path if path.endsWith("\\") =>
	    				path.stripSuffix("\\")
	    			case path => path
	    		}
	    	case name => name
	    }

	    val absolutePath: String = file.getAbsolutePath()

	    val directory: Boolean = file.isDirectory

	    lazy val children: List[IFile] = 
	    	file.listFiles() match {
	            case null => Nil
	            case files =>
	                files.filterNot(_.isHidden).map{File(_)}.toList.sortWith { (a, b) =>
	                	if(a.directory == b.directory) {
	                		a.name.toLowerCase <= b.name.toLowerCase
	                	}else {
	                		a.directory
	                	}
	                }
	        }

	    lazy val parents: List[IFile] =
	    	file.getParentFile() match {
	    		case null if System.getProperty("os.name").toLowerCase().indexOf("win") > -1 =>
	    			List(Root())
	    		case null => Nil
	    		case parent =>
	    			val p = File(parent)
	    			p.parents :+ p
	    	}
	}

	case class Root() extends IFile {

		val name: String = System.getProperty("user.name")

		val absolutePath: String = "root://"

		val directory: Boolean = true

		val parents: List[IFile] = Nil

		lazy val children: List[IFile] = {
			JFile.listRoots().map(File(_)).toList
		}
	}

- val current: IFile = if(currentPath == "root://") Root() else File(new JFile(currentPath))

- def render(file: IFile, multiple: Boolean)(classAttr: => String)
	- if(!directoryOnly || file.directory)
		%li{:class => {classAttr}}<
			- if(multiple)
				%input(type="checkbox" value="#{file.absolutePath}")
				- if(file.directory)
					%a{:href => {"#" + file.absolutePath}}<
						= file.name
				- else
					= file.name
			- else
				%a{:href => {"#" + file.absolutePath}}<
					= file.name

.navigation
	%ul.current
		- (current.parents :+ current).zipWithIndex.foreach
			- case (file, index) =>
				- render(file, false) 
					- index match
						- case 0 => "root"
						- case _ => null
	%ul.children
		- current.children.foreach
			- file =>
				- render(file, multiple)
					- file match 
						- case file if file.directory => "directory"
						- case _ => null

- J.init
	:&plain
		require(["jeus/navigation"], function(navigation){
			navigation('#{updateUrl}', #{if (targetId == null) "null" else "'" + targetId + "'"}, #{directoryOnly}, #{multiple});
		});
