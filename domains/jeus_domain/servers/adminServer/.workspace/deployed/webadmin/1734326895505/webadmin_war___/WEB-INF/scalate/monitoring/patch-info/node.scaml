-@ val model: List[TabularData] = null

- val nodeNamePattern = """.+?\[(.+)\]""".r

- layout("/scalate/layouts/main.scaml", Map("description" -> "message:monitoring.patch-info.description", "title" -> "message:monitoring.patch-info.title", "help" -> "monitoring.patch-info"))
	- render("/scalate/monitoring/patch-info/menu.scaml", Map("first" -> 0))

	- if (model != null)
		- var patchByNode = Map.empty[String, List[String]]
		- model.foreach
			- data =>
				- val nodeNamePattern(nodeName) = data.getHeader
				= Tabular.render(null, data)
					- case (0, dns) =>
						- Item(dns(0), "250px")
							- (index, row) =>
								- 
									val patch = row(0).toString
									val nodes = patchByNode.getOrElse(patch, List.empty[String])

									patchByNode = patchByNode + (patch -> (nodes :+ nodeName))
								= patch

					- case (1, dns) =>
						- Item(dns(1), null, "pre-line")
							- (index, row) =>
								= row(1)

		- render("/scalate/monitoring/patch-info/grouped.scaml", Map("grouped" -> patchByNode))



