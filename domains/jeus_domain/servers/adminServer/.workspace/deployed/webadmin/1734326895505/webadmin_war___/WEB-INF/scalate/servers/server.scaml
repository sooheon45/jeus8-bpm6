- import jeus.tool.webadmin.Environment
- val jEnv = S.eval[Environment]("@j_env")

-@ val model: ServerType
-@ val serverName: String = null
-@ val createMode: Boolean = false
-@ val __dataSources: List[String] = Nil
-@ val __customResourceRefs: List[String] = Nil
-@ val __externalResourceRefs: List[String] = Nil
-@ val __nodeNames: List[String]
-@ val __InCluster: String = null
-@ val __groups: List[String] = Nil

-@ val running: Boolean = false

-@ val isAutoed: Boolean = false

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:common.server.label"))
	- J.base = "domain.servers.server"
	- val isReadonly = if(!createMode && isAutoed) true else false
	- render("/WEB-INF/scalate/menu/server.scaml", Map("first" -> 0, "second" -> 0, "disabled" -> createMode))

	%form(method="post" action="#{requestUri}")
		- J.render("createMode")

		- J.render("fieldIcons")
		
		- var basic = "disabledbasic"
		- if(!isReadonly)
			- J.render("buttons")
			- basic = "basic"

		- J.layout(basic)
			.table
				- if (!createMode && !jEnv.isCloud)
					- J.field(schema = ".auto-generated", noBinding = false)
						- J.checkbox(attributes = Map("disabled" -> "true"), default = model.getAutoGenerated())
				- J.field(schema = ".name", noBinding = !createMode)
					- if (createMode)
						- J.input()
					- else
						= serverName
				- J.field(schema = ".log-home")
					- J.input()				
				- J.field(schema = ".node-name")
					- J.select(options = S.options(__nodeNames, model.getNodeName), attributes = Map("disabled" -> {!hasLock | running}))
				- J.field(schema = ".group")
					- J.select(options = null :: __groups)
				- J.field(schema = ".action-on-resource-leak")
					- J.select()
				- J.field(schema = ".data-source-remote-lookup")
					- J.checkbox()
				- J.field(schema = ".engine-init-on-startup")
					- J.checkbox()
				- J.field(schema = ".use-web-engine")
					- J.checkbox()
				- J.field(schema = ".use-ejb-engine")
					- J.checkbox()
				- J.field(schema = ".use-jms-engine")
					- J.checkbox()
				- J.field(schema = ".managed-executor-service")
					- J.input()
				- J.field(schema = ".managed-scheduled-executor-service")
					- J.input()
				- J.field(schema = ".context-service")
					- J.input()
				- J.field(schema = ".managed-thread-factory")
					- J.input()		
			- J.group(schema = ".jvm-config")
				.table
					- J.field(schema = ".jvm-option")
						- J.textarea()
			- J.group(schema = ".data-sources")
				.table
					- J.field(schema = ".data-source")
						- if (__dataSources == Nil)
							= S.message("common.noExist.entry")
						- else
							- var __checkedDataSources: List[String] = if(model.isSetDataSources) model.getDataSources.getDataSource.asScala.toList else Nil
							= Table.render(null, __dataSources)
								- case 0 =>
									- Item.checkallCustom(".tableType", name = "dataSources.dataSource", col = "30px", disabled = !hasLock)
										- row =>
											- (row, !hasLock, __checkedDataSources.contains(row))
								- case 1 =>
									- Item("message:header.data-source-id", col = "550px")
										- (index, row) =>
											= row
							
			- J.group(schema = ".custom-resource-refs")
				.table
					- J.field(schema = ".name")
						- if (__customResourceRefs == Nil)
							= S.message("common.noExist.entry")
						- J.checkboxes(options = __customResourceRefs)
			- J.group(schema = ".external-resource-refs")
				.table
					- J.field(schema = ".name")
						- if (__externalResourceRefs == Nil)
							= S.message("common.noExist.entry")
						- J.checkboxes(options = __externalResourceRefs)
		- J.layout("advanced")
			.table
			- J.group(schema = "")
				.table
					- J.field(alert = __InCluster, schema = ".use-MEJB")
						- J.checkbox()
					- J.field(alert = __InCluster, schema = ".class-ftp")
						- J.checkbox()
					- J.field(schema = ".log-stdout-to-raw-format")
						- J.checkbox()
				- J.group(schema = ".user-interceptor")
					.table
						- J.field(schema = ".preceding-command")
							- J.input()
						- J.field(schema = ".jeus-classloader-append-class-path")
							- J.input()
						- J.field(schema = ".jeus-classloader-append-dirs")
							- J.input()
						- J.field(schema = ".profile-class-option-name")
							- J.input()
						- J.field(schema = ".boot-classloader-append-class-path")
							- J.input()
				- J.group(schema = ".enable-interop", noBinding = false, alert = __InCluster, attributes = Map("tail" -> "checkboxForGroup"))
					.table
					- J.group(schema = ".interop-ssl-config")
						.table
							- J.field(schema = ".keystore-path")
								- J.input()
							- J.field(schema = ".keystore-alias")
								- J.input()
							- J.field(schema = ".keystore-password")
								- J.password()
							- J.field(schema = ".keystore-keypassword")
								- J.password()
							- J.field(schema = ".truststore-path")
								- J.input()
							- J.field(schema = ".truststore-password")
								- J.password()

		.lineBar
		- if(!isReadonly)
			- J.render("buttons")
		