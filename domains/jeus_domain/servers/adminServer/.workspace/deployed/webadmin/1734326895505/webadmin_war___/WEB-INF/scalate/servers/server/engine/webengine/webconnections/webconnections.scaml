-@ val serverName: String
-@ val model: List[CommonWebListenerType]



-@ val isAutoed: Boolean = false

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:servers.web-connections.title"))
	- J.base = "domain.servers.server.web-engine.web-connections"


	- val isReadonly = if(isAutoed) true else false
	- render("/WEB-INF/scalate/menu/server.scaml", Map("first" -> 2, "second" -> 0, "third" -> 3))

	%h2.title
		= J.title("message:servers.web-connections.title", J.base)
	= Table.render(null, model)
		- case 1 =>
			- Item("message:header.name")
				- (index, row) =>
					- row match
						- case row: WebtobConnectorType =>
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/webtob/{name}", serverName, row.getName)
							%a(href="#{url}") = row.getName
						- case row: TmaxConnectorType =>
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/tmax/{name}", serverName, row.getName)
							%a(href="#{url}") = row.getName
						- case row: Ajp13ListenerType =>
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/ajp13/{name}", serverName, row.getName)
							%a(href="#{url}") = row.getName
						- case row: HttpListenerType =>
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/http/{name}", serverName, row.getName)
							%a(href="#{url}") = row.getName
						- case row: TcpListenerType =>
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/tcp/{name}", serverName, row.getName)
							%a(href="#{url}") = row.getName
		- case 2 =>
			- Item("message:header.type", null, "center")
				- (index, row) =>
					- row match
						- case row: WebtobConnectorType =>
							= S.message("servers.server.web-engine.web-connections.webtob")
						- case row: TmaxConnectorType =>
							= S.message("servers.server.web-engine.web-connections.tmax")
						- case row: Ajp13ListenerType =>
							= S.message("servers.server.web-engine.web-connections.ajp13")
						- case row: HttpListenerType =>
							= S.message("servers.server.web-engine.web-connections.http")
						- case row: TcpListenerType =>
							= S.message("servers.server.web-engine.web-connections.tcp")
		- case 3 =>
			- Item(null, "180px", "center")
				- (index, row) =>
					- row match
						- case row: WebtobConnectorType =>
							- val typeModel = S.message("servers.server.web-engine.web-connections.webtob")
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/{name}/{connectiontype}", serverName, row.getName, S.message("servers.server.web-engine.web-connections.webtob"))
							- J.render("formButton", Map("label" -> "message:common.remove.button", "action" -> url, "method" -> "delete", "cssClass" -> "bt_del", "disabled" -> ({!hasLock || isReadonly})))
							- val connectionName = row.getName
							- val uri = J.buildUri("/servers/{server}/engine/webengine/webconnections/webtob/{name}", serverName, row.getName)
							- J.render("formButton", Map("label" -> "message:common.duplicate.button", "action" -> uri, "method" -> "put", "cssClass" -> "bt_add", "disabled" -> {!hasLock || isReadonly}, "dialogTemplateUri" -> "servers/server/engine/webengine/webconnections/dupwebconnections", "dialogParams" -> Map("typeModel" -> typeModel, "serverName" -> serverName, "connectionName" -> connectionName, "action" -> uri)))

						- case row: TmaxConnectorType =>
							- val typeModel = S.message("servers.server.web-engine.web-connections.tmax")
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/{name}/{connectiontype}", serverName, row.getName, typeModel)
							- J.render("formButton", Map("label" -> "message:common.remove.button", "action" -> url, "method" -> "delete", "cssClass" -> "bt_del", "disabled" -> ({!hasLock || isReadonly})))
							
						- case row: Ajp13ListenerType =>
							- val typeModel = S.message("servers.server.web-engine.web-connections.ajp13")
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/{name}/{connectiontype}", serverName, row.getName, typeModel)
							- J.render("formButton", Map("label" -> "message:common.remove.button", "action" -> url, "method" -> "delete", "cssClass" -> "bt_del", "disabled" -> ({!hasLock || isReadonly})))
							
						- case row: HttpListenerType =>
							- val typeModel = S.message("servers.server.web-engine.web-connections.http")
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/{name}/{connectiontype}", serverName, row.getName, typeModel)
							- J.render("formButton", Map("label" -> "message:common.remove.button", "action" -> url, "method" -> "delete", "cssClass" -> "bt_del", "disabled" -> ({!hasLock || isReadonly} || row.getName == "ADMIN-HTTP")))
							
						- case row: TcpListenerType =>
							- val typeModel = S.message("servers.server.web-engine.web-connections.tcp")
							- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections/{name}/{connectiontype}", serverName, row.getName, typeModel)
							- J.render("formButton", Map("label" -> "message:common.remove.button", "action" -> url, "method" -> "delete", "cssClass" -> "bt_del", "disabled" -> ({!hasLock || isReadonly})))
						- case _ =>
				
	- if (hasLock && !isReadonly)
		.buttonGroup
			- val url = J.buildUri("/servers/{server}/engine/webengine/webconnections", serverName)
			- J.render("formButton", Map("label" -> "message:servers.server.web-engine.web-connections.webtob.label", "action" -> {url + "/webtob"}, "cssClass" -> "bt_handler", "name" -> "create"))
			- J.render("formButton", Map("label" -> "message:servers.server.web-engine.web-connections.tmax.label", "action" -> {url + "/tmax"}, "cssClass" -> "bt_handler", "name" -> "create"))
			- J.render("formButton", Map("label" -> "message:servers.server.web-engine.web-connections.ajp13.label", "action" -> {url + "/ajp13"}, "cssClass" -> "bt_handler", "name" -> "create"))
			- J.render("formButton", Map("label" -> "message:servers.server.web-engine.web-connections.http.label", "action" -> {url + "/http"}, "cssClass" -> "bt_handler", "name" -> "create"))
			- J.render("formButton", Map("label" -> "message:servers.server.web-engine.web-connections.tcp.label", "action" -> {url + "/tcp"}, "cssClass" -> "bt_handler", "name" -> "create"))