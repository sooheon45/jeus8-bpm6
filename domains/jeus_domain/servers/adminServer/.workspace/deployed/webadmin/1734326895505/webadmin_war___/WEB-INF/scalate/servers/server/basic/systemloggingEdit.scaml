-@ val createMode: Boolean = false
-@ val model: SystemLoggingType
-@ val handlers: List[CommonHandlerType] = Nil
-@ val systemlogname: String = null
-@ val serverName: String


-@ val isAutoed: Boolean = false

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:servers.system-logging.title"))
	- J.base = "domain.servers.server.system-logging"
	- val isReadonly = if(!createMode && isAutoed) true else false
	- render("/WEB-INF/scalate/menu/server.scaml", Map("first" -> 0, "second" -> 4))

	%form(method="post" action="#{requestUri}")
		- J.render("createMode")

		- J.render("fieldIcons")
		
		- var basic = "disabledbasic"
		- if(!isReadonly)
			- J.render("buttons")
			- basic = "basic"

		- J.layout(basic)
			.table
				- J.field(schema = ".name")
					- if (createMode)
						- J.input()
					- else
						= model.getName()
				- J.field(schema = ".level")
					- J.select()

		- J.layout("advanced")
			.table
				- J.field(schema = ".use-parent-handlers")
					- if (!createMode && model.getName().equals("jeus"))
						- J.checkbox(attributes = Map("disabled" -> "true"))
						- J.hidden()
					- else
						- J.checkbox()
				- J.field(schema = ".filter-class")
					- J.input()
				- J.field(schema = ".formatter-class")
					- J.input()

		.lineBar
		- if(!isReadonly)
			- J.render("buttons")
	%h2.title
		= J.title("message:servers.handlers.title", J.base)
	= Table.render(null, handlers)
		- case 1 =>
			- Item("message:header.name")
				- (index, row) =>
					- val urlBase = 
						- row match
							- case row: FileHandlerType =>
								- "/servers/{server}/systemlogging/{systemlogname}/filehandler/{name}"
							- case row: SmtpHandlerType =>
								- "/servers/{server}/systemlogging/{systemlogname}/smtphandler/{name}"
							- case row: SocketHandlerType =>
								- "/servers/{server}/systemlogging/{systemlogname}/sockethandler/{name}"
							- case row: UserHandlerType =>
								- "/servers/{server}/systemlogging/{systemlogname}/userhandler/{name}"
					- val url = J.buildUri(urlBase, serverName, systemlogname, row.getName())
					%a(href="#{url}") = row.getName()
		- case 2 =>
			- Item("message:header.type", "30%")
				- (index, row) =>
					- row match
						- case row: FileHandlerType =>
							file
						- case row: SmtpHandlerType =>
							smtp
						- case row: SocketHandlerType =>
							socket
						- case row: UserHandlerType =>
							user
		- case 3 =>
			- Item("message:header.level", "30%")
				- (index, row) =>
					= row.getLevel
		- case 4 =>
			- Item(null, "90px", "center")
				- (index, row) =>
					- val url = J.buildUri("/servers/{server}/systemlogging/{systemlogname}/handler/{name}", serverName, systemlogname, row.getName())
					- J.render("formButton", Map("label" -> "message:common.remove.button", "action" -> url, "method" -> "delete", "cssClass" -> "bt_del", "disabled" -> {!hasLock || isReadonly}))

	- if (hasLock && !isReadonly && !createMode)
		.buttonGroup
			- List(("message:servers.server.log.filehandler", "/filehandler"), ("message:servers.server.log.smtphandler", "/smtphandler"), ("message:servers.server.log.sockethandler", "/sockethandler"), ("message:servers.server.log.userhandler", "/userhandler")) foreach 
				- case (label, subUrl) =>
					- var url = J.buildUri("/servers/{server}/systemlogging/{systemlogname}" + subUrl, serverName, systemlogname)
					- J.render("formButton", Map("label" -> label, "action" -> url, "name" -> "create", "cssClass" -> "bt_handler"))
