- import jeus.tool.webadmin.Settings

-@ val users: List[UserType]
-@ val groups: List[GroupType]
-@ val domainName: String
-@ val lockedUsers: Set[String] = Set.empty
-@ val isInXML: Boolean = false

- layout("/WEB-INF/scalate/layouts/main.scaml", Map("title" -> "message:security.accounts.title"))
	- J.base = "accounts"
	- render("/WEB-INF/scalate/menu/security.scaml", Map("first" -> 5, "second" -> 0))
	%h2.title
		= S.message("security.users.title")

	= Table.render(null, users)
		- case 1 =>
			- Item("message:header.name", "100px")
				- (index, row) =>
					- val url = J.buildUri("/security/{domainName}/subjectgroup/user/{name}", domainName, row.getName)
					%a(href="#{url}") = row.getName
		- case 2 =>
			- Item("message:header.password", "150px")
				- (index, row) =>
					- if(S.eval[Settings]("@settings").concealPassword)
						- row.getPassword match
							- case null =>
							- case password =>
								= password.replaceAll(".", "*")
					- else
						= row.getPassword
		- case 3 =>
			- Item("message:header.group", "120px")
				- (index, row) =>
					= row.getGroup.asScala.mkString(",")
		- case 4 =>
			- Item("message:header.description")
				- (index, row) =>
					= row.getDescription
		- case 5 =>
			- Item("message:header.command", "160px", "center")
				- (index, row) =>
					- val locked = lockedUsers contains row.getName
					- var url = J.buildUri("/security/{domainName}/subjectgroup/lockuser/{name}", domainName, row.getName)
					- J.render("formButton", Map("label" -> "message:security.manager.subjectgroup.lockuser.label", "disabled" -> (hasLockAndNoAutoLock || locked), "cssClass" -> "bt2", "action" -> url, "confirm" -> true))

					- url = J.buildUri("/security/{domainName}/subjectgroup/unlockuser/{name}", domainName, row.getName)
					- J.render("formButton", Map("label" -> "message:security.manager.subjectgroup.unlockuser.label", "disabled" -> (hasLockAndNoAutoLock || !locked), "cssClass" -> "bt2", "action" -> url, "confirm" -> true))
		- case 6 =>
			- Item("90px", List("center"),
				- Head
					- () =>
						- val url = J.buildUri("/security/{domainName}/subjectgroup/user", domainName)
						- J.render("formButton", Map("label" -> "message:common.add.button", "cssClass" -> "button bt_add", "name" -> "create", "disabled" -> {!hasLock || !isInXML}, "action" -> url))
			- )
				- (index, row) =>
					- val confirmDelete: Boolean = S.eval[Settings]("@settings").referenceDelete
					- val url = J.buildUri("/security/{domainName}/subjectgroup/user/{name}", domainName, row.getName)
					- J.render("formButton", Map("label" -> "message:common.remove.button", "method" -> "delete", "cssClass" -> "button bt_del", "disabled" -> !hasLock, "action" -> url, "confirm" -> confirmDelete, "message" -> "message:common.confirm.reference.delete.message"))
					
	%h2.title
		= S.message("security.groups.title")

	= Table.render(null, groups)
		- case 1 =>
			- Item("message:header.name", "150px")
				- (index, row) =>
					- val url = J.buildUri("/security/{domainName}/subjectgroup/group/{name}", domainName, row.getName)
					%a(href="#{url}") = row.getName
		- case 2 =>
			- Item("message:header.subgroup", "150px")
				- (index, row) =>
					= row.getSubgroup.asScala.mkString(",")
		- case 3 =>
			- Item("message:header.description")
				- (index, row) =>
					= row.getDescription
		- case 4 =>
			- Item("90px", List("center"),
				- Head
					- () =>
						- val url = J.buildUri("/security/{domainName}/subjectgroup/group", domainName)
						- J.render("formButton", Map("label" -> "message:common.add.button", "cssClass" -> "button bt_add", "name" -> "create", "disabled" -> {!hasLock || !isInXML}, "action" -> url))
			- )
				- (index, row) =>
					- val confirmDelete: Boolean = S.eval[Settings]("@settings").referenceDelete
					- val url = J.buildUri("/security/{domainName}/subjectgroup/group/{name}", domainName, row.getName)
					- J.render("formButton", Map("label" -> "message:common.remove.button", "method" -> "delete", "cssClass" -> "button bt_del", "disabled" -> !hasLock, "action" -> url, "confirm" -> confirmDelete, "message" -> "message:common.confirm.reference.delete.message"))
