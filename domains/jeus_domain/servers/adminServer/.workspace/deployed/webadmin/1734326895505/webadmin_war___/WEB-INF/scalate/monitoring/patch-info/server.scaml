-@ val model: List[TabularData] = null

- layout("/scalate/layouts/main.scaml", Map("description" -> "message:monitoring.patch-info.description", "title" -> "message:monitoring.patch-info.title", "help" -> "monitoring.patch-info"))
	- render("/scalate/monitoring/patch-info/menu.scaml", Map("first" -> 1))
	%h2.title
		= S.message("monitoring.patch-info.title")
	
	- if (model != null)
		- var patchByServer = Map.empty[String, List[String]]
		- model.foreach
			- data =>
				= Tabular.render(null, data)
					- case (0, dns) =>
						- Item(dns(0), "250px")
							- (index, row) =>
								= row(0)
					- case (1, dns) =>
						- Item(dns(1), null, "pre-line")
							- (index, row) =>
								- 
									val server = row(0).toString
									val content = row(1).toString.trim
									if (!content.startsWith("[error]")) {
										content.split('\n')
											.filterNot(_ == "")
											.filterNot(_.startsWith("  - "))
											.foreach { patch =>
												val servers = patchByServer.getOrElse(patch, List.empty[String])
												patchByServer = patchByServer + (patch -> (servers :+ server))
										}
									}
								= content

		- render("/scalate/monitoring/patch-info/grouped.scaml", Map("grouped" -> patchByServer))


